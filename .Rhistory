output$Ti_id <- renderPlot({
ggplot(data = parameters_out(), aes(Ti, fill = Ti_col)) +
stat_bin(binwidth = 4, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$r_id <- renderPlot({
ggplot(data = parameters_out(), aes(r, fill = r_col)) +
stat_bin(binwidth = 0.01, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
}
# Run the application
shinyApp(ui, server)
}
lythrum.growth.curves::lythrum_growth_app()
lythrum_growth_app <- function(){
#' Imports
#' @importFrom dplyr filter
#' @importFrom dplyr pull
#' @importFrom dplyr select
#' @importFrom dplyr mutate
#' @import ggplot2
pop_names <- unique(parameters$POP)
# user interface ----
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(selectInput("population", "Population", choices = pop_names)),
fluidRow(selectInput("family", "Family", choices = NULL, selected = NULL)),
fluidRow(selectInput("id", "Individual", choices = NULL, selected = NULL))
),
mainPanel(
plotOutput("growth_curve")
)
),
fluidRow(
column(4, radioButtons("ht_opt", "Set height automatically", choices = c("Yes", "No"), selected = "Yes")),
column(4, sliderInput("height", "Plot height", min = 30, max = 120, value = 120, step = 5))
),
fluidRow(
column(4, plotOutput("Asym_id")),
column(4, plotOutput("Ti_id")),
column(4, plotOutput("r_id"))
)
)
# backend ----
server <- function(input, output, session) {
# update dropdown lists as required ----
observe({
fam_list <- unique(pull(filter(parameters, POP == input$population), FAMCODE))
updateSelectInput(session, "family", choices = fam_list)
})
observe({
id_list <- pull(filter(parameters, FAMCODE == input$family), CODE)
updateSelectInput(session, "id", choices = id_list)
})
# specify parameters for histogram ----
bins <- reactive({
req(input$id)
filter(parameters, CODE == input$id)
})
parameters_out <- reactive({
req(input$id)
mutate(parameters, Asym_col = ifelse(Asym_bin == bins()$Asym_bin, T, F),
Ti_col = ifelse(Ti_bin == bins()$Ti_bin, T, F),
r_col = ifelse(r_bin == bins()$r_bin, T, F))
})
# draw growth curve using observations and predicted ----
y_max <- reactive(input$height)
output$growth_curve <- renderPlot({
p <- ggplot(data = filter(observations, CODE == input$id),
aes(x = DAYS, y = S1)) +
geom_point() +
geom_line(data = filter(predicted, CODE == input$id),
aes(x = DAYS, y = S1)) +
annotate("text", x = 0, y = Inf, label = paste0("Asym = ", round(bins()$Asym, digits = 2),
"\nTi = ", round(bins()$Ti, digits = 2),
"\nr = ", round(bins()$r, digits = 3),
"\nn = ", nrow(filter(observations, CODE == input$id))),
hjust = 0, vjust = 1) +
theme_classic()
if(input$ht_opt == "No"){
p + ylim(0, y_max())
} else{
p
}
# show location in distribution of parameters among block, population, family, individual
# show total parameter value
# count number of observations
})
# draw histograms using parameters_cut ----
output$Asym_id <- renderPlot({
ggplot(data = parameters_out(), aes(Asym, fill = Asym_col)) +
stat_bin(binwidth = 5, boundary = 0, show.legend = FALSE) +
theme_classic()
})
output$Asym_id <- renderPlot({
ggplot(data = parameters_out(), aes(Asym, fill = Asym_col)) +
stat_bin(binwidth = 12, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$Ti_id <- renderPlot({
ggplot(data = parameters_out(), aes(Ti, fill = Ti_col)) +
stat_bin(binwidth = 4, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$r_id <- renderPlot({
ggplot(data = parameters_out(), aes(r, fill = r_col)) +
stat_bin(binwidth = 0.01, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
}
# Run the application
shinyApp(ui, server)
}
lythrum_growth_app()
lythrum_growth_app <- function(){
#' Imports
#' @importFrom dplyr filter
#' @importFrom dplyr pull
#' @importFrom dplyr select
#' @importFrom dplyr mutate
#' @import ggplot2
pop_names <- unique(parameters$POP)
# user interface ----
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(selectInput("population", "Population", choices = pop_names)),
fluidRow(selectInput("family", "Family", choices = NULL, selected = NULL)),
fluidRow(selectInput("id", "Individual", choices = NULL, selected = NULL)),
fluidRow(
column(4, radioButtons("ht_opt", "Set height automatically", choices = c("Yes", "No"), selected = "Yes")),
column(4, sliderInput("height", "Plot height", min = 30, max = 120, value = 120, step = 5))
)
),
mainPanel(
plotOutput("growth_curve")
)
),
fluidRow(
column(4, plotOutput("Asym_id")),
column(4, plotOutput("Ti_id")),
column(4, plotOutput("r_id"))
)
)
# backend ----
server <- function(input, output, session) {
# update dropdown lists as required ----
observe({
fam_list <- unique(pull(filter(parameters, POP == input$population), FAMCODE))
updateSelectInput(session, "family", choices = fam_list)
})
observe({
id_list <- pull(filter(parameters, FAMCODE == input$family), CODE)
updateSelectInput(session, "id", choices = id_list)
})
# specify parameters for histogram ----
bins <- reactive({
req(input$id)
filter(parameters, CODE == input$id)
})
parameters_out <- reactive({
req(input$id)
mutate(parameters, Asym_col = ifelse(Asym_bin == bins()$Asym_bin, T, F),
Ti_col = ifelse(Ti_bin == bins()$Ti_bin, T, F),
r_col = ifelse(r_bin == bins()$r_bin, T, F))
})
# draw growth curve using observations and predicted ----
y_max <- reactive(input$height)
output$growth_curve <- renderPlot({
p <- ggplot(data = filter(observations, CODE == input$id),
aes(x = DAYS, y = S1)) +
geom_point() +
geom_line(data = filter(predicted, CODE == input$id),
aes(x = DAYS, y = S1)) +
annotate("text", x = 0, y = Inf, label = paste0("Asym = ", round(bins()$Asym, digits = 2),
"\nTi = ", round(bins()$Ti, digits = 2),
"\nr = ", round(bins()$r, digits = 3),
"\nn = ", nrow(filter(observations, CODE == input$id))),
hjust = 0, vjust = 1) +
theme_classic()
if(input$ht_opt == "No"){
p + ylim(0, y_max())
} else{
p
}
# show location in distribution of parameters among block, population, family, individual
# show total parameter value
# count number of observations
})
# draw histograms using parameters_cut ----
output$Asym_id <- renderPlot({
ggplot(data = parameters_out(), aes(Asym, fill = Asym_col)) +
stat_bin(binwidth = 5, boundary = 0, show.legend = FALSE) +
theme_classic()
})
output$Asym_id <- renderPlot({
ggplot(data = parameters_out(), aes(Asym, fill = Asym_col)) +
stat_bin(binwidth = 12, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$Ti_id <- renderPlot({
ggplot(data = parameters_out(), aes(Ti, fill = Ti_col)) +
stat_bin(binwidth = 4, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$r_id <- renderPlot({
ggplot(data = parameters_out(), aes(r, fill = r_col)) +
stat_bin(binwidth = 0.01, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
}
# Run the application
shinyApp(ui, server)
}
lythrum_growth_app()
lythrum_growth_app <- function(){
#' Imports
#' @importFrom dplyr filter
#' @importFrom dplyr pull
#' @importFrom dplyr select
#' @importFrom dplyr mutate
#' @import ggplot2
pop_names <- unique(parameters$POP)
# user interface ----
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
fluidRow(selectInput("population", "Population", choices = pop_names)),
fluidRow(selectInput("family", "Family", choices = NULL, selected = NULL)),
fluidRow(selectInput("id", "Individual", choices = NULL, selected = NULL)),
fluidRow(
column(4, radioButtons("ht_opt", "Set height automatically", choices = c("Yes", "No"), selected = "Yes")),
column(8, sliderInput("height", "Plot height", min = 30, max = 120, value = 120, step = 5))
)
),
mainPanel(
plotOutput("growth_curve")
)
),
fluidRow(
column(4, plotOutput("Asym_id")),
column(4, plotOutput("Ti_id")),
column(4, plotOutput("r_id"))
)
)
# backend ----
server <- function(input, output, session) {
# update dropdown lists as required ----
observe({
fam_list <- unique(pull(filter(parameters, POP == input$population), FAMCODE))
updateSelectInput(session, "family", choices = fam_list)
})
observe({
id_list <- pull(filter(parameters, FAMCODE == input$family), CODE)
updateSelectInput(session, "id", choices = id_list)
})
# specify parameters for histogram ----
bins <- reactive({
req(input$id)
filter(parameters, CODE == input$id)
})
parameters_out <- reactive({
req(input$id)
mutate(parameters, Asym_col = ifelse(Asym_bin == bins()$Asym_bin, T, F),
Ti_col = ifelse(Ti_bin == bins()$Ti_bin, T, F),
r_col = ifelse(r_bin == bins()$r_bin, T, F))
})
# draw growth curve using observations and predicted ----
y_max <- reactive(input$height)
output$growth_curve <- renderPlot({
p <- ggplot(data = filter(observations, CODE == input$id),
aes(x = DAYS, y = S1)) +
geom_point() +
geom_line(data = filter(predicted, CODE == input$id),
aes(x = DAYS, y = S1)) +
annotate("text", x = 0, y = Inf, label = paste0("Asym = ", round(bins()$Asym, digits = 2),
"\nTi = ", round(bins()$Ti, digits = 2),
"\nr = ", round(bins()$r, digits = 3),
"\nn = ", nrow(filter(observations, CODE == input$id))),
hjust = 0, vjust = 1) +
theme_classic()
if(input$ht_opt == "No"){
p + ylim(0, y_max())
} else{
p
}
# show location in distribution of parameters among block, population, family, individual
# show total parameter value
# count number of observations
})
# draw histograms using parameters_cut ----
output$Asym_id <- renderPlot({
ggplot(data = parameters_out(), aes(Asym, fill = Asym_col)) +
stat_bin(binwidth = 5, boundary = 0, show.legend = FALSE) +
theme_classic()
})
output$Asym_id <- renderPlot({
ggplot(data = parameters_out(), aes(Asym, fill = Asym_col)) +
stat_bin(binwidth = 12, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$Ti_id <- renderPlot({
ggplot(data = parameters_out(), aes(Ti, fill = Ti_col)) +
stat_bin(binwidth = 4, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
output$r_id <- renderPlot({
ggplot(data = parameters_out(), aes(r, fill = r_col)) +
stat_bin(binwidth = 0.01, boundary = 0, show.legend = FALSE) +
theme_classic() +
theme(aspect.ratio = 0.8)
})
}
# Run the application
shinyApp(ui, server)
}
lythrum_growth_app()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rsconnect::deployApp()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rsconnect::deployApp()
rsconnect::deployApp()
lythrum.growth.app::lythrum_growth_app()
lythrum.growth.curves::lythrum_growth_app()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
devtools::check()
lythrum.growth.curves::lythrum_growth_app()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rm(lythrum_growth_app)
?reactlog
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
options(shiny.reactlog = TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?req
rsconnect::deployApp()
?observe
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?updateSelectInput
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
library(shiny)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?req
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?reactive
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?REQ
?req
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?ifelse
??withMathJax
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
library(shiny)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
?plotOutput
?renderPlot
?radioButtons
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
library(shiny)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rsconnect::deployApp()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rsconnect::deployApp()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rsconnect::deployApp()
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
library(shiny)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
source('C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R', echo=TRUE)
rsconnect::deployApp()
??nlme
pkgload::load_all(".")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R")
lythrum_growth_app()
library(shiny)
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
ui <- fluidPage(
withMathJax(),
titlePanel(
p("This app displays growth curves for ", em("Lythrum salicaria"), " individuals measured in a common garden in 2017
(2278 individuals total). The growth curves are generated using a sigmoidal function of the form:",
"$$Height(t) = \\frac{A_{sym}}{1 + e^{-(t-T_{i}) * r}}$$"),
p("The main panel shows the predicted growth curve and height measurements collected for a selected individual through the season,
the numeric values for the parameters ", em("Asym"), ", ", em("Ti"), ", and ", em("r"), ", and the number of measurements taken from
the individual. The three smaller panels show how the individual estimate for the three parameters compare to the entire common garden
population. The four panels are updated only when a new individual is selected. To initiate this app, select a population, family,
then individual from the dropdown menu.")
pkgload::load_all(".")
lythrum_growth_app()
lythrum_growth_app()
library(shiny)
lythrum_growth_app()
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
library(shiny)
?fluidRow
?box
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
pkgload::load_all(".")
lythrum_growth_app()
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
lythrum_growth_app()
lythrum_growth_app()
rsconnect::deployApp()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
rsconnect::deployApp()
source("C:/Users/Eugene/OneDrive/Documents/lythrum.growth.curves/R/lythrum_growth_app.R")
run_dj_app()
library(OSUICode)
install.packages("OSUICode")
